# -*- coding=UTF-8 -*-
# Code generated by auto-derby-plugin-generator 94139cf
# URL: https://natescarlet.github.io/auto-derby-plugin-generator/#/plugins/race
# Date: 3/20/2022, 9:32:23 AM

import auto_derby
from auto_derby import single_mode


from typing import Text, Dict, Tuple

_ACTION_NONE = 0
_ACTION_BAN = 1
_ACTION_LESS = 2
_ACTION_MORE = 3
_ACTION_PICK = 4

_DEFAULT_ACTION = _ACTION_BAN

_RULES: Dict[Tuple[int, Text], int] = {
    (13, "函館ジュニアステークス"): _ACTION_PICK,
    (15, "新潟ジュニアステークス"): _ACTION_PICK,
    (16, "札幌ジュニアステークス"): _ACTION_PICK,
    (18, "サウジアラビアロイヤルカップ"): _ACTION_PICK,
    (19, "アルテミスステークス"): _ACTION_PICK,
    (20, "デイリー杯ジュニアステークス"): _ACTION_PICK,
    (22, "朝日杯フューチュリティステークス"): _ACTION_PICK,
    #(23, "ホープフルステークス"): _ACTION_PICK,
    (24, "京成杯"): _ACTION_PICK,
    (26, "共同通信杯"): _ACTION_PICK,
    (28, "チューリップ賞"): _ACTION_PICK,
    (29, "スプリングステークス"): _ACTION_PICK,
    (30, "桜花賞"): _ACTION_PICK,
    (32, "NHKマイルカップ"): _ACTION_PICK,
    (33, "葵ステークス"): _ACTION_PICK,
    (34, "鳴尾記念"): _ACTION_PICK,
    (36, "ラジオNIKKEI賞"): _ACTION_PICK,
    (37, "クイーンステークス"): _ACTION_PICK,
    (38, "レパードステークス"): _ACTION_PICK,
    (40, "ローズステークス"): _ACTION_PICK,
    (41, "スプリンターズステークス"): _ACTION_PICK,
    (43, "富士ステークス"): _ACTION_PICK,
    (44, "JBCスプリント"): _ACTION_PICK,
    (45, "マイルチャンピオンシップ"): _ACTION_PICK,
    (47, "阪神カップ"): _ACTION_PICK,
    (48, "京都金杯"): _ACTION_PICK,
    (49, "東海ステークス"): _ACTION_PICK,
    (51, "中山記念"): _ACTION_PICK,
    (52, "中山ウマ娘ステークス"): _ACTION_PICK,
    (53, "高松宮記念"): _ACTION_PICK,
    (55, "マイラーズカップ"): _ACTION_PICK,
    (56, "ヴィクトリアマイル"): _ACTION_PICK,
    (58, "安田記念"): _ACTION_PICK,
    (59, "函館スプリントステークス"): _ACTION_PICK,
    (60, "CBC賞"): _ACTION_PICK,
    (62, "関屋記念"): _ACTION_PICK,
    (63, "北九州記念"): _ACTION_PICK,
    (64, "京成杯オータムハンデキャップ"): _ACTION_PICK,
    (66, "毎日王冠"): _ACTION_PICK,
    (67, "スワンステークス"): _ACTION_PICK,
    (69, "京阪杯"): _ACTION_PICK,
    (70, "チャンピオンズカップ"): _ACTION_PICK,
    (71, "阪神カップ"): _ACTION_PICK,
}


class Plugin(auto_derby.Plugin):
    def install(self) -> None:
        class Race(auto_derby.config.single_mode_race_class):
            def score(self, ctx: single_mode.Context) -> float:
                ret = super().score(ctx)
                action = _RULES.get(
                    (ctx.turn_count(), self.name),
                    _DEFAULT_ACTION,
                )
                if self.grade == Race.GRADE_NOT_WINNING and not ctx.is_after_winning:
                    ret += 15
                    return ret
                if action == _ACTION_BAN:
                    ret = 0
                elif action == _ACTION_LESS:
                    ret -= 5
                elif action == _ACTION_MORE:
                    ret += 5
                elif action == _ACTION_PICK:
                    ret += 100
                return ret

        auto_derby.config.single_mode_race_class = Race


auto_derby.plugin.register(__name__, Plugin())
